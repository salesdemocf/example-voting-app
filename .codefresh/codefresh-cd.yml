version: '1.0'
stages:
  - build
  - push
  - security
  - "pull request"
  - staging
  - production
steps:
  main_clone:
    title: Cloning main repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: github
  BuildingMicroServices:
    type: parallel
    stage: build
    steps:
      BuildResultImage:
        title: Building Result Image
        type: build
        image_name: example-voting-app/result
        working_directory: ./result/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildVoteImage:
        title: Building Vote Image
        type: build
        image_name: example-voting-app/vote
        working_directory: ./vote/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildWorkerImage:
        title: Building Worker Image
        type: build
        image_name: example-voting-app/worker
        working_directory: ./worker/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      BuildTestImage:
        title: Building Test Image
        type: build
        image_name: example-voting-app/tests
        working_directory: ./tests/
        dockerfile: Dockerfile
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    fail_fast: true
  PushingToGCR:
    type: parallel
    stage: push
    steps:
      PushResultImage:
        title: Pushing Result Image to GCR
        type: push
        candidate: ${{BuildResultImage}}
        registry: gcr
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      PushVoteImage:
        title: Pushing Vote Image to GCR
        type: push
        candidate: ${{BuildVoteImage}}
        registry: gcr
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      PushWorkerImage:
        title: Pushing Worker Image to GCR
        type: push
        candidate: ${{BuildWorkerImage}}
        registry: gcr
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
      PushTestImage:
        title: Pushing Test Image to GCR
        type: push
        candidate: ${{BuildTestImage}}
        registry: gcr
        tag: '${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}'
    fail_fast: true
  PrismaCloudScanning:
    type: parallel
    stage: security
    steps:
      PrismaCloudResultImageScan:
        type: prisma-cloud
        arguments:
          IMAGE_NAME: codefresh-sa/example-voting-app/result
          IMAGE_TAG: ${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
          PC_HOSTNAME: ${{PC_HOSTNAME}}
          PC_PORT: ${{PC_PORT}}
          PC_USERNAME: ${{PC_USERNAME}}
          PC_PASSWORD: ${{PC_PASSWORD}}
          PC_PROTOCOL: ${{PC_PROTOCOL}}
          REGISTRY: gcr.io
      PrismaCloudVoteImageScan:
        type: prisma-cloud
        arguments:
          IMAGE_NAME: codefresh-sa/example-voting-app/vote
          IMAGE_TAG: ${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
          PC_HOSTNAME: ${{PC_HOSTNAME}}
          PC_PORT: ${{PC_PORT}}
          PC_USERNAME: ${{PC_USERNAME}}
          PC_PASSWORD: ${{PC_PASSWORD}}
          PC_PROTOCOL: ${{PC_PROTOCOL}}
          REGISTRY: gcr.io
      PrismaCloudWorkerImageScan:
        type: prisma-cloud
        arguments:
          IMAGE_NAME: codefresh-sa/example-voting-app/worker
          IMAGE_TAG: ${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
          PC_HOSTNAME: ${{PC_HOSTNAME}}
          PC_PORT: ${{PC_PORT}}
          PC_USERNAME: ${{PC_USERNAME}}
          PC_PASSWORD: ${{PC_PASSWORD}}
          PC_PROTOCOL: ${{PC_PROTOCOL}}
          REGISTRY: gcr.io
  DeployPRRelease:
    stage: "pull request"
    title: Create Ephemeral Helm Release for Pull Request
    image: dustinvanbuskirk/cfstep-helm-secrets:3.1.1-demo
    working_directory: ./
    environment:
      - CHART_REF=example-voting-app
      - RELEASE_NAME='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-eva'
      - KUBE_CONTEXT=${{PR_KUBE_CONTEXT}}
      - NAMESPACE=${{PR_KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      - CMD_PS=-f helm_vars/example-voting-app/pull-requests/worker/secrets.yaml
      - value_result_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_vote_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
      - value_worker_image_tag=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    commands:
      - echo -e "${{GPG_SEC}}" > mygpgkey_sec.asc
      - gpg --import --allow-secret-key-import mygpgkey_sec.asc
      - /opt/bin/release_chart
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
    env:
      name: pull-requests
      type: kubernetes
      change: pr environment created
      filters:
        - cluster: sales-dev@codefresh-sa
          namespace: pull-requests   
  RunPRDVTs:
    title: Running Deployment Verification Tests
    stage: "pull request"
    type: codefresh-run
    arguments:
      PIPELINE_ID: ${{CF_REPO_NAME}}/dvts
      TRIGGER_ID: ${{CF_REPO_NAME}}
      BRANCH: ${{CF_BRANCH}}
      SHA: ${{CF_REVISION}}
      ENABLE_NOTIFICATIONS: true
      CONTEXT:
        - github
      VARIABLE:
        - KUBE_CONTEXT=${{PR_KUBE_CONTEXT}}
        - NAMESPACE=${{PR_KUBE_NAMESPACE}}
        - RELEASE_NAME=${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-eva
        - TEST_IMAGE=example-voting-app/tests:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  PushChartToHelmRepository:
    stage: staging
    title: Push Helm Chart to Repository
    image: codefresh/cfstep-helm:3.0.1
    environment:
      - ACTION=push
      - CHART_REF=example-voting-app
      - CHART_VERSION=${{CF_RELEASE_TAG}}
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  UpgradeStagingRelease:
    stage: staging
    title: Upgrading Staging Release
    image: dustinvanbuskirk/cfstep-helm-secrets:3.1.1-demo
    working_directory: /
    environment:
      - CHART_REF=example-voting-app
      - CHART_REPO_URL=cm://h.cfcr.io/${{CF_ACCOUNT}}/default
      - CHART_VERSION=${{CF_RELEASE_TAG}}
      - RELEASE_NAME=staging-eva
      - KUBE_CONTEXT=${{STAGING_KUBE_CONTEXT}}
      - NAMESPACE=${{STAGING_KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      - CMD_PS=-f /codefresh/volume/example-voting-app/helm_vars/example-voting-app/staging/worker/secrets.yaml
      - value_result_image_tag=master-${{CF_SHORT_REVISION}}
      - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
      - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
    commands:
      - echo -e "${{GPG_SEC}}" > mygpgkey_sec.asc
      - gpg --import --allow-secret-key-import mygpgkey_sec.asc
      - /opt/bin/release_chart
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
    env:
      name: staging
      endpoints:
        - name: app
          url: http://35.230.106.103/
      type: helm-release
      change: staging deployment
      filters:
        - cluster: sales-dev@codefresh-sa
          releaseName: staging-eva
  RunStagingDVTs:
    stage: staging
    title: Running DVTS on Staging Release
    type: codefresh-run
    arguments:
      PIPELINE_ID: ${{CF_REPO_NAME}}/dvts
      TRIGGER_ID: ${{CF_REPO_NAME}}
      BRANCH: ${{CF_BRANCH}}
      SHA: ${{CF_REVISION}}
      ENABLE_NOTIFICATIONS: true
      CONTEXT:
        - github
      VARIABLE:
        - KUBE_CONTEXT=${{STAGING_KUBE_CONTEXT}}
        - NAMESPACE=${{STAGING_KUBE_NAMESPACE}}
        - RELEASE_NAME=staging-eva
        - TEST_IMAGE=example-voting-app/tests:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    when:
      condition:
        any:
          stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  ProductionApproval:
    type: pending-approval
    title: Deploy to Production?
    description: Deploys current release to production
    when:
      condition:
        all:
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  UpgradeProductionRelease:
    stage: production
    title: Upgrading Production Release
    image: dustinvanbuskirk/cfstep-helm-secrets:3.1.1-demo
    working_directory: /
    environment:
      - CHART_REF=example-voting-app
      - CHART_REPO_URL=cm://h.cfcr.io/${{CF_ACCOUNT}}/default
      - CHART_VERSION=${{CF_RELEASE_TAG}}
      - RELEASE_NAME=production-eva
      - KUBE_CONTEXT=${{PRODUCTION_KUBE_CONTEXT}}
      - NAMESPACE=${{PRODUCTION_KUBE_NAMESPACE}}
      - DEBUG_CHART=true
      # NEED PGP Key in metadata of CD spec
      - CMD_PS=-f /codefresh/volume/example-voting-app/helm_vars/example-voting-app/production/worker/secrets.yaml
      - value_result_image_tag=master-${{CF_SHORT_REVISION}}
      - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
      - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
    commands:
      - echo -e "${{GPG_SEC}}" > mygpgkey_sec.asc
      - gpg --import --allow-secret-key-import mygpgkey_sec.asc
      - /opt/bin/release_chart
    when:
      steps:
      - name: ProductionApproval
        on:
        - approved
    env:
      name: production
      endpoints:
        - name: app
          url: http://34.83.53.241/
      type: helm-release
      change: production deployment
      filters:
        - cluster: sales-dev@codefresh-sa
          releaseName: production-eva
  RunProductionDVTs:
    stage: production
    title: Running DVTS on Production Release
    type: codefresh-run
    arguments:
      PIPELINE_ID: ${{CF_REPO_NAME}}/dvts
      TRIGGER_ID: ${{CF_REPO_NAME}}
      BRANCH: ${{CF_BRANCH}}
      SHA: ${{CF_REVISION}}
      ENABLE_NOTIFICATIONS: true
      CONTEXT:
        - github
      VARIABLE:
        - KUBE_CONTEXT=${{PRODUCTION_KUBE_CONTEXT}}
        - NAMESPACE=${{PRODUCTION_KUBE_NAMESPACE}}
        - RELEASE_NAME=production-eva
        - TEST_IMAGE=example-voting-app/tests:${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
    when:
      condition:
        all:
          prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
